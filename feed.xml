<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hailyedv.github.io/</id><title>hailye's Blog</title><subtitle>developer hailye's blog</subtitle> <updated>2022-01-25T16:09:30+09:00</updated> <author> <name>Lee HyeLin</name> <uri>https://hailyedv.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hailyedv.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://hailyedv.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 Lee HyeLin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>스프링(Spring)</title><link href="https://hailyedv.github.io/posts/spring01/" rel="alternate" type="text/html" title="스프링(Spring)" /><published>2022-01-20T00:00:00+09:00</published> <updated>2022-01-25T16:01:27+09:00</updated> <id>https://hailyedv.github.io/posts/spring01/</id> <content src="https://hailyedv.github.io/posts/spring01/" /> <author> <name>Lee HyeLin</name> </author> <category term="spring" /> <summary> 스프링이란? 자바 엔터프라이즈 애플리케이션 개발에 사용되는 애플리케이션 프레임워크 스프링 = 애플리케이션 컨텍스트 + 공통 프로그래밍 모델 + 기술 API 1.애플리케이션 컨텍스트(Application Context) 애플리케이션 컨텍스트 또는 스프링 컨테이너(Spring Container)라고 하며, 설정 정보를 참고하여 IoC를 적용해 빈(Bean)의 생성 및 관계설정 등의 제어 작업을 총괄한다. 1)종류 클래스 기능 GenericXmlApplicationContext 프로젝트 내부의 설정 파일 XML을 읽어와 구현 XmlWebApplicationContext ... </summary> </entry> <entry><title>요구사항 분석 (현행 시스템 파악)</title><link href="https://hailyedv.github.io/posts/licns-reqmnt02-2/" rel="alternate" type="text/html" title="요구사항 분석 (현행 시스템 파악)" /><published>2022-01-10T00:00:00+09:00</published> <updated>2022-01-10T00:00:00+09:00</updated> <id>https://hailyedv.github.io/posts/licns-reqmnt02-2/</id> <content src="https://hailyedv.github.io/posts/licns-reqmnt02-2/" /> <author> <name>Lee HyeLin</name> </author> <category term="license" /> <category term="정보처리기사" /> <summary> 정보처리기사-소프트웨어 설계 : 요구사항 확인02 - 2 아래 내용은 정보처리기사 자격증 시험공부를 위한 요약 및 정리입니다. 내용은 인프런 - 정보처리기사 필기를 참고하였습니다. 현행 시스템 파악 현행 시스템이 어떤 하위 시스템으로 구성되어있는가? 어떤 기능을 사용하는가? 타 시스템과의 연계 정보는 무엇인가? 어떤 기술 요소와, SW, HW를 사용하는가? 네트워크는 어떻게 구성되어있는가? 를 파악하는 활동 1. 운영체제(Operation System) 분석 현재 시스템의 운영체제를 분석 (종류, 버전 등) 운영체제(OS)란? HW와 SW 자원을 관리 운영체제의 종류 Unix, Linux, Window, Ios,... </summary> </entry> <entry><title>요구사항 분석</title><link href="https://hailyedv.github.io/posts/licns-reqmnt02-1/" rel="alternate" type="text/html" title="요구사항 분석" /><published>2022-01-07T00:00:00+09:00</published> <updated>2022-01-07T00:00:00+09:00</updated> <id>https://hailyedv.github.io/posts/licns-reqmnt02-1/</id> <content src="https://hailyedv.github.io/posts/licns-reqmnt02-1/" /> <author> <name>Lee HyeLin</name> </author> <category term="license" /> <category term="정보처리기사" /> <summary> 정보처리기사-소프트웨어 설계 : 요구사항 확인02 - 1 아래 내용은 정보처리기사 자격증 시험공부를 위한 요약 및 정리입니다. 내용은 인프런 - 정보처리기사 필기를 참고하였습니다. 요구사항 확인 어떤 분석모델을 사용할 것인지 확인하고 현행 시스템에 대해 분석 현행 시스템 분석이 필요한 이유? 개발하고자 하는 SW가 현행 시스템에 적용가능한가를 판단하기 위함 개발하고자 하는 SW가 동작하는 OS, DBMS에 문제가 없는가 판단하기 위함 현행 시스템을 분석함으로써 추후 개발할 SW를 구체적으로 기술하기 위함 현행 시스템 분석 1. 플랫폼 SW를 구동하는데에 쓰이는 하드웨어와 소프트웨어의 결합 기능 SW 개발 및 운영 비용 감소 및 생산성... </summary> </entry> <entry><title>소프트웨어 생명 주기 SDLC(Software Development Life Cycle)</title><link href="https://hailyedv.github.io/posts/licns-reqmnt01/" rel="alternate" type="text/html" title="소프트웨어 생명 주기 SDLC(Software Development Life Cycle)" /><published>2022-01-06T00:00:00+09:00</published> <updated>2022-01-06T00:00:00+09:00</updated> <id>https://hailyedv.github.io/posts/licns-reqmnt01/</id> <content src="https://hailyedv.github.io/posts/licns-reqmnt01/" /> <author> <name>Lee HyeLin</name> </author> <category term="license" /> <category term="정보처리기사" /> <summary> 정보처리기사-소프트웨어 설계 : 요구사항 확인01 아래 내용은 정보처리기사 자격증 시험공부를 위한 요약 및 정리입니다. 내용은 인프런 - 정보처리기사 필기를 참고하였습니다. 소프트웨어 생명주기 소프트웨어를 체계적으로 개발하고 관리하기 위하여 개발 과정을 단계별(개발을 위한 정의, 운용, 유지보수 등)로 나누어 구분한 것 1.폭포수형 모형 순차적으로 한 단계, 한 단계를 진행해 나가는 방식으로 전 단계가 완료되기 전에는 다음 단계로 진행할 수 없도록 제한하는 방식 가장 오래되고 가장 폭넓게 사용된 고전적 생명 주기 모형 추가적인 요구사항을 받아들이기 어려움 선형 순차적 모형 (요구자의 요구사항이 명확한 경우 사용) *마치 폭포는 위에서... </summary> </entry> <entry><title>블로그를 시작해봅니다!</title><link href="https://hailyedv.github.io/posts/first/" rel="alternate" type="text/html" title="블로그를 시작해봅니다!" /><published>2022-01-05T00:00:00+09:00</published> <updated>2022-01-05T00:00:00+09:00</updated> <id>https://hailyedv.github.io/posts/first/</id> <content src="https://hailyedv.github.io/posts/first/" /> <author> <name>Lee HyeLin</name> </author> <category term="etc" /> <category term="Chatter" /> <summary> 2022년 01월 05일! 새해를 맞이하며 늦었지만 따라가보는 개발자 블로그😁 새해 포부는 작심삼일이라지만 나의 커리어를 위해 차근차근 쌓아나가 보자! 2022년 hailyenote 목표 블로그 꾸준히 하기 개발 이론에 좀 더 빠삭해지기 게을러지지 않기 로직을 말로 잘 설명하기 Hailye’s Github link </summary> </entry> </feed>
