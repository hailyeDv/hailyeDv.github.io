[ { "title": "스프링(Spring)", "url": "/posts/spring01/", "categories": "spring", "tags": "spring, 스프링, Application context, 애플리케이션 컨텍스트, 공통 프로그래밍 모델, Ioc/DI, 서비스 추상화, AOP, 기술 API", "date": "2022-01-20 00:00:00 +0900", "snippet": "스프링이란? 자바 엔터프라이즈 애플리케이션 개발에 사용되는 애플리케이션 프레임워크스프링 = 애플리케이션 컨텍스트 + 공통 프로그래밍 모델 + 기술 API1.애플리케이션 컨텍스트(Application Context)애플리케이션 컨텍스트 또는 스프링 컨테이너(Spring Container)라고 하며, 설정 정보를 참고하여 IoC를 적용해 빈(Bean)의 생성 및 관계설정 등의 제어 작업을 총괄한다.1)종류 클래스 기능 GenericXmlApplicationContext 프로젝트 내부의 설정 파일 XML을 읽어와 구현 XmlWebApplicationContext 웹 기반의 스프링 어플리케이션을 개발할 떄 사용 2)구성1.EnvironmentCapable - Profile과 Property를 제공 Profile 특정 실행 환경(테스트, 운영 등)에서 사용할 빈(Bean)들의 묶음 Property 애플리케이션에 등록된 여러가지 key, value 쌍으로 제공되는 프로퍼티에 접근할 수 있는 기능으로 Spring은 프로퍼티에 계층형으로 접근한다.2.BeanFactory - 빈(Bean)을 생성하고 의존관계 설정3.MessageSource - 메시지의 국제화를 지원4.ApplicationEventPublisher - 이벤트 프로그래밍에 필요한 기능을 제공5.ResourcePatternResolver - 리소스를 읽어오는 인터페이스2.공통 프로그래밍 모델(IoC/DI, 서비스 추상화, AOP)1)IoC/DI오브젝트의 생명주기와 의존 관계에 대한 프로그래밍 모델로 유연하고 확장성이 뛰어난 코드를 만들 수 있게 도와주는 객체지향 설계 원칙과 디자인 패턴의 핵심 원리를 담고 있다.1.IoC(Inversion of Control)IoC란 Inversion of Control의 약자로 직역하면 제어의 역전이다. 즉, 제어권이 역전되었다는 뜻으로 과거 객체를 생성하고, 의존관계를 연결하는 등의 제어권을 개발자가 직접가지고 있었던 것을 서블릿, EJB가 등장하며 서블릿, EJB를 관리하는 외부 컨테이너로 제어권이 넘어갔는데 이것을 제어권의 역전 IoC라고 한다.2.DI(Dependency Injection)DI란 Dependency Injection의 약자로 의존성 주입이란 뜻으로 DL, DI로 나누어 진다.1.DL(Dependency Lookup) : 의존성 검색 컨테이너에서 제공하는 API를 이용하여 사용하고자하는 빈(Bean)을 저장소에서 Lookup한다.2.DI(Dependenvy Injection) : 의존성 주입 각 객체간의 의존성을 컨테이너가 자동으로 연결해주는 방식으로 개발자가 빈(Bean) 설정 파일에 의존 관계가 필요한 정보를 추가하면 컨테이너가 자동으로 연결한다.2)서비스 추상화특정 환경이나 서버, 기술에 종속되지 않고 이식성이 뛰어나며 유연한 애플리케이션을 개발할 수 있게 유연한 추상 계층을 두는 방법이다.3)APO(Aspect Oriented Programming)애플리케이션 코드에 산재해서 나타나는 부가적인 기능을 독립적으로 모듈화하는 프로그래밍 모델로 다양한 엔터프라이즈 서비스를 적용하고도 깔끔한 코드를 유지할 수 있게 해준다.3.기술 API엔터프라이즈 애플리케이션 개발의 다양한 영역에 바로 활용할 수 있는 방대한 양의 기술 API를 제공하며, UI 작성, 웹 프레젠테이션 계층, 비즈니스 서비스 계층, 기븐 서비스 계층 등에서 필요한 주요 기술을 스프링에서 일관된 방식으로 사용할 수 있도록 지원해주는 기능과 전략 클래스 등을 제공한다." }, { "title": "요구사항 분석 (현행 시스템 파악)", "url": "/posts/licns-reqmnt02-2/", "categories": "license, 정보처리기사", "tags": "자격증, 정보처리기사, 정처기, 소프트웨어 설계, 요구사항, 현행 시스템 파악, 운영체제 분석, 네트워크 분석, 데이터베이스 분석, 비즈니스 융합 분석", "date": "2022-01-10 00:00:00 +0900", "snippet": "정보처리기사-소프트웨어 설계 : 요구사항 확인02 - 2아래 내용은 정보처리기사 자격증 시험공부를 위한 요약 및 정리입니다.내용은 인프런 - 정보처리기사 필기를 참고하였습니다.현행 시스템 파악 현행 시스템이 어떤 하위 시스템으로 구성되어있는가?어떤 기능을 사용하는가?타 시스템과의 연계 정보는 무엇인가?어떤 기술 요소와, SW, HW를 사용하는가?네트워크는 어떻게 구성되어있는가?를 파악하는 활동 1. 운영체제(Operation System) 분석 현재 시스템의 운영체제를 분석 (종류, 버전 등) 운영체제(OS)란? HW와 SW 자원을 관리 운영체제의 종류 Unix, Linux, Window, Ios, Aos 2. 네트워크 분석 현재 시스템의 네트워크를 분석 (구조, 사내 인터넷 데이터 센터’IDC’ 등) 네트워크란? 디지털 전기통신망 분산되어 있는 컴퓨터를 통신망으로 연결한것 OSI(Open System Interconnecton) 7 Layout 계층 OSI 7 계층 네트워크 구성도 서버의 위치, 서버 간의 네트워크 연결방식을 문서화 3. 데이터베이스(Database) 분석 현재 시스템의 데이터베이스 시스템을 분석(DBMS, 테이블 수, 데이터 증가량 등) 데이터베이스(DB)란? 데이터베이스 생성(Insert), 조회(Select), 변경(Update &amp;amp; Delete) 등의 관리 데이터베이스의 기능 중복성 통제, 데이터 공유, 데이터 접근 통제, 인터페이스 제공 관련성 표현, 무결성 보장 논리/물리 테이블의 구조 파악 각 테이블의 정규화 정도, 조인의 난이도 파악 4. 비즈니스 융합 분석 고객, 제품 및 서비스, 사업구조를 분석 비즈니스 융합이란? 비즈니스(Business) : 영리를 목적으로 행하는 모든 활동 비즈니스 모델 : 요소들의 구성체(조직에 대한 목표 및 전략, 프로세스에 대한 기술 및 구조 등) 비즈니스 융합 : 비즈니스 모델의 적용범위 확대 비즈니스 융합 유형 제품 융합 서비스 융합 제품과 IT융합 서비스와 IT융합 제품의 서비스화 서비스의 제품화 제품과 서비스 융합 " }, { "title": "요구사항 분석", "url": "/posts/licns-reqmnt02-1/", "categories": "license, 정보처리기사", "tags": "자격증, 정보처리기사, 정처기, 소프트웨어 설계, 요구사항, 플랫폼, 현행 시스템 파악", "date": "2022-01-07 00:00:00 +0900", "snippet": "정보처리기사-소프트웨어 설계 : 요구사항 확인02 - 1아래 내용은 정보처리기사 자격증 시험공부를 위한 요약 및 정리입니다.내용은 인프런 - 정보처리기사 필기를 참고하였습니다.요구사항 확인 어떤 분석모델을 사용할 것인지 확인하고 현행 시스템에 대해 분석현행 시스템 분석이 필요한 이유? 개발하고자 하는 SW가 현행 시스템에 적용가능한가를 판단하기 위함 개발하고자 하는 SW가 동작하는 OS, DBMS에 문제가 없는가 판단하기 위함 현행 시스템을 분석함으로써 추후 개발할 SW를 구체적으로 기술하기 위함현행 시스템 분석1. 플랫폼 SW를 구동하는데에 쓰이는 하드웨어와 소프트웨어의 결합 기능 SW 개발 및 운영 비용 감소 및 생산성 향상 동일한 플랫폼간의 커뮤니티 생성이 가능함으로써 네트워크 효과를 유발 기능 및 특성 확인 방법 기능 테스트 사용자 인터뷰 (사용자와의 소통) 문서점검 (사용한 플롯폼과 유사한 자료를 분석) 플랫폼의 성능 특성 확인 방법 성능 테스트(부하, 속도 등 확인) 사용자 인터뷰 (사용자와의 소통) 문서점검 (사용한 플롯폼과 유사한 자료를 분석) 2. 현행 시스템 파악 현행 시스템이 어떤 하위 시스템으로 구성되어있는가?어떤 기능을 사용하는가?타 시스템과의 연계 정보는 무엇인가?어떤 기술 요소와, SW, HW를 사용하는가?네트워크는 어떻게 구성되어있는가?를 파악하는 활동 1단계 - 시스템 구성, 기능, 인터페이스 파악1단계 - 시스템 구성, 기능, 인터페이스 파악 2단계 - 아키텍처 구성, SW 구성 파악1단계 - 아키텍처 구성, 소프트웨어 구성 파악 3단계 - 하드웨어 구성, 네트워크 구성 파악1단계 - 하드웨어 구성, 네트워크 구성 파악" }, { "title": "소프트웨어 생명 주기 SDLC(Software Development Life Cycle)", "url": "/posts/licns-reqmnt01/", "categories": "license, 정보처리기사", "tags": "자격증, 정보처리기사, 정처기, 소프트웨어 설계, 요구사항, 소프트웨어 생명 주기, SDLC", "date": "2022-01-06 00:00:00 +0900", "snippet": "정보처리기사-소프트웨어 설계 : 요구사항 확인01아래 내용은 정보처리기사 자격증 시험공부를 위한 요약 및 정리입니다.내용은 인프런 - 정보처리기사 필기를 참고하였습니다.소프트웨어 생명주기 소프트웨어를 체계적으로 개발하고 관리하기 위하여 개발 과정을 단계별(개발을 위한 정의, 운용, 유지보수 등)로 나누어 구분한 것 1.폭포수형 모형 순차적으로 한 단계, 한 단계를 진행해 나가는 방식으로 전 단계가 완료되기 전에는 다음 단계로 진행할 수 없도록 제한하는 방식 가장 오래되고 가장 폭넓게 사용된 고전적 생명 주기 모형 추가적인 요구사항을 받아들이기 어려움 선형 순차적 모형(요구자의 요구사항이 명확한 경우 사용)*마치 폭포는 위에서 내려오지만 거슬러 올라가지 못하듯 단계가 반드시 순차적으로 진행되는 것! 폭포수형 모형 단계 2.프로토타입 모형 개발초기에 시스템 모형을 간단히 만들어 사용자에게 보여주고 직접 사용할 수 있게하여 발생하는 요구 사항에 따라 재구축 과정 반복하며 시스템을 개선시켜 나가는 방식 추가, 변경, 삭제 등 즉시 반영이 가능하다 프로토타입을 만들어 수정해 나가는 방식 비용, 시간을 예측할 수 없음 원형(prototype) 모형(요구사항이 명확하지 않은 경우 사용)*말 그대로 프로토타입으로 요구사항 충족엔 용이하나 비용과 시간을 예측할 수 없음! 프로토타입 모형 단계 3.나선형 모형 고객과의 소통을 통하여 계획수립과 위험분석, 구축, 고객 평가의 과정을 반복적으로 거쳐 소프트웨어를 개발하는 방식 시스템 개발시 발생하는 위험을 최소화 하기 위한 방식 위험 부담이 큰 대형 시스템 구축에 적합*목표설정, 위험분석, 구축, 고객평가를 돌고돌고 돌려 위험성을 줄이는 것! 나선형 모형 단계 4.애자일 고객과의 소통에 초점을 맞춘 방식 고객 중심 요구자의 요구사항 충족 소규모 시스템에 적합*고객 중심으로 요구사항 충족을 위한! " }, { "title": "블로그를 시작해봅니다!", "url": "/posts/first/", "categories": "etc, Chatter", "tags": "first, starting, flutter", "date": "2022-01-05 00:00:00 +0900", "snippet": "2022년 01월 05일!새해를 맞이하며 늦었지만 따라가보는 개발자 블로그😁새해 포부는 작심삼일이라지만 나의 커리어를 위해 차근차근 쌓아나가 보자! 2022년 hailyenote 목표 블로그 꾸준히 하기 개발 이론에 좀 더 빠삭해지기 게을러지지 않기 로직을 말로 잘 설명하기Hailye’s Github link" }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 08:32:00 +0900", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml filegoogle_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp;amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&amp;lt;project-id&amp;gt;.&amp;lt;region&amp;gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;amp;client_id=XYZ.apps.googleusercontent.com&amp;amp;redirect_uri=ABCDEFGEnter verification code: &amp;lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&amp;gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = &#39;pete.frisella@gmail.com (Pete Frisella)&#39;# OAuth 2.0 Client SettingsAUTH_CONFIG = { &#39;OAUTH_CLIENT_ID&#39;: &#39;YOUR_CLIENT_ID&#39;, &#39;OAUTH_CLIENT_SECRET&#39;: &#39;YOUR_CLIENT_SECRET&#39;, &#39;OAUTH_REDIRECT_URI&#39;: &#39;%s%s&#39; % ( &#39;https://chirpy-test-XXXXXX.ue.r.appspot.com&#39;, &#39;/admin/auth&#39; )}# XSRF SettingsXSRF_KEY = &#39;OnceUponATimeThereLivedALegend&#39; Tip: You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com. But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID pv: proxy_endpoint: &#39;https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&amp;lt;ID FROM SUPER PROXY&amp;gt;&#39; cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &amp;#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 01:34:00 +0900", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp;amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (PNG and ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ Note: ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 21:55:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &amp;lt;GH_USERNAME&amp;gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &amp;lt;GH_USERNAME&amp;gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh Note: If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts folder docs If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &amp;lt;GH_USERNAME&amp;gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem &quot;jekyll-theme-chirpy&quot; in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.2&quot;, &quot;&amp;gt;= 3.2.1&quot;+ gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.3&quot;, &quot;&amp;gt;= 3.3.0&quot; And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 15:10:00 +0900", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- Note: The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:---author: name: Full Name link: https://example.com---Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=&quot;700&quot; height=&quot;400&quot; }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=&quot;700&quot; h=&quot;400&quot; }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. For example: Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } Limitation: Once the position of the image is specified, the image caption should not be added.ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&amp;lt;img src=&quot;https://cdn.com/path/to/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&amp;lt;img src=&quot;/img/path/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute src, width, height, and alt for the image:---image: src: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute src only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---Code BlockMarkdown symbols ``` can easily create a code block as follows:This is a plaintext code snippet.Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` Limitation: The Jekyll style highlight tag is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of the code block, you can append {: .nolineno} at the next line:```shellecho &#39;No more line numbers!&#39;```{: .nolineno}Specifying the FilenameYou may have noticed that the code language will be displayed on the left side of the header of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=&quot;path/to/file&quot; }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains &#39;Pack&#39; %} This product&#39;s title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 12:33:00 +0900", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line to shows the Block Quote.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo &quot;The command was not successful.&quot;; #do the needful / exitfi;Specific filename@import &quot;colors/light-typography&quot;, &quot;colors/dark-typography&quot;Reverse Footnote The footnote source &amp;#8617; The 2nd footnote source &amp;#8617; " } ]
